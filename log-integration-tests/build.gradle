/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Log Ballerina Integration Tests'

def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def snapshotVersion = "-SNAPSHOT"
def tomlVersion = project.version.replace("${snapshotVersion}", "")
def originalConfig = ballerinaConfigFile.text
def configTOMLFile = new File("$project.projectDir/tests/Config.toml")
def initialTOMLcontent = configTOMLFile.text
def originalDependencyConfig = ballerinaDependencyFile.text
def tempDir = File.createTempDir()

configurations {
    jbalTools
    externalJars
}

dependencies {
    compile group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    externalJars (group: 'org.ballerinalang', name: 'io-native', version: "${stdlibIoVersion}") {
        transitive = false
    }
    compile project(':log-native')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task copyLogStdlib {
    dependsOn(":log-ballerina:build")
    dependsOn(copyStdlibs)
    doLast {
        /* Copy Log module */
        copy {
            from "$project.rootDir/log-ballerina/build/cache_parent/bala"
            into "${ballerinaDist}/repo/bala"
        }
        copy {
            from "$project.rootDir/log-ballerina/build/cache_parent/cache"
            into "${ballerinaDist}/repo/cache"
        }
    }
}

task updateTomlVerions {
    doLast {
        def stdlibNativeIoVersion = project.stdlibIoVersion
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@io.native.version@", stdlibNativeIoVersion)
        ballerinaConfigFile.text = newConfig

        def stdlibDependentIoVersion = project.stdlibIoVersion.replace("${snapshotVersion}", "")
        def stdlibDependentRegexVersion = project.stdlibRegexVersion.replace("${snapshotVersion}", "")
        def newDependencyConfig = ballerinaDependencyFile.text.replace("@toml.version@", tomlVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.regex.version@", stdlibDependentRegexVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        configTOMLFile.text = initialTOMLcontent
        ballerinaDependencyFile.text = originalDependencyConfig
    }
}

def setExecPath(configTOMLFile, distributionBinPath) {
    configTOMLFile.text = configTOMLFile.text.replace("@exec.path@", distributionBinPath)
}

def setTempDirPath(configTOMLFile, tempDirPath) {
    configTOMLFile.text = configTOMLFile.text.replace("@temp.path@/bal", tempDirPath)
}

task copyTestResources(type: Copy) {
    into tempDir
    into("log-project") {
        from "tests/resources/samples/log-project"
    }
}

task ballerinaIntegrationTests {
    inputs.dir file(project.projectDir)
    dependsOn(copyStdlibs)
    dependsOn(copyToLib)
    dependsOn(copyTestResources)
    dependsOn(":log-ballerina:build")
    dependsOn(updateTomlVerions)
    dependsOn(copyLogStdlib)
    finalizedBy(revertTomlFile)
    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
        setExecPath(configTOMLFile,distributionBinPath)
        setTempDirPath(configTOMLFile, "$tempDir")
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat test && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal test --code-coverage --includes=*"
            }
        }
    }
}

test {
    dependsOn(ballerinaIntegrationTests)
}

ballerinaIntegrationTests.dependsOn ":log-ballerina:build"
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
ballerinaIntegrationTests.dependsOn copyStdlibs
ballerinaIntegrationTests.dependsOn updateTomlVerions
build.dependsOn test
